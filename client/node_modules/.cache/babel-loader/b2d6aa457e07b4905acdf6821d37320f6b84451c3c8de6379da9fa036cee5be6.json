{"ast":null,"code":"import axios from \"axios\";\n// local requests\n\nconst localInstance = axios.create({\n  baseURL: \"http://localhost:5000\"\n});\nexport const createBookEntry = async _ref => {\n  let {\n    google_fk,\n    categories\n  } = _ref;\n  return await localInstance.post(`api/books/`, {\n    google_fk,\n    categories\n  });\n};\n\n// google api requests\n\nconst googleURL = \"https://www.googleapis.com/books/v1/\";\nconst apiKey = \"AIzaSyBbgOtmMrBOZ6ie66zJXV2h_IG8UcUX_VI\";\nconst googleInstance = axios.create();\nconst sanitizedSearchTerm = searchTerm => searchTerm.replace(/ /g, \"+\");\nconst sanitizedBookResponse = item => {\n  const {\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate,\n    previewLink,\n    imageLinks\n  } = item.volumeInfo;\n  const {\n    id\n  } = item;\n  return {\n    id,\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate: new Date(publishedDate),\n    previewLink,\n    imageLink: imageLinks === null || imageLinks === void 0 ? void 0 : imageLinks.thumbnail\n  };\n};\nexport const getBooks = async function () {\n  let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let author = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  const searchParams = `${googleURL}volumes?q=${title && `+intitle:${sanitizedSearchTerm(title)}`}${author && `+inauthor:${sanitizedSearchTerm(author)}`}+subject:fiction&langRestrict=en&maxResults=40&key=${apiKey}`;\n  try {\n    const {\n      data\n    } = await googleInstance.get(searchParams);\n    const bookList = data.items.map(sanitizedBookResponse);\n    return bookList;\n  } catch (e) {\n    console.log(e);\n  }\n};","map":{"version":3,"names":["axios","localInstance","create","baseURL","createBookEntry","_ref","google_fk","categories","post","googleURL","apiKey","googleInstance","sanitizedSearchTerm","searchTerm","replace","sanitizedBookResponse","item","title","authors","description","publishedDate","previewLink","imageLinks","volumeInfo","id","Date","imageLink","thumbnail","getBooks","arguments","length","undefined","author","searchParams","data","get","bookList","items","map","e","console","log"],"sources":["/Users/careycosta/dev/darkreads/client/src/components/repository.ts"],"sourcesContent":["import axios from \"axios\";\nimport { BookProps } from \"./types\";\n\n// local requests\n\nconst localInstance = axios.create({\n  baseURL: \"http://localhost:5000\",\n});\n\nexport const createBookEntry = async ({\n  google_fk,\n  categories,\n}: {\n  google_fk: string | undefined;\n  categories: string[];\n}) => {\n  return await localInstance.post(`api/books/`, {\n    google_fk,\n    categories,\n  });\n};\n\n// google api requests\n\nconst googleURL = \"https://www.googleapis.com/books/v1/\";\nconst apiKey = \"AIzaSyBbgOtmMrBOZ6ie66zJXV2h_IG8UcUX_VI\";\n\nconst googleInstance = axios.create();\n\nconst sanitizedSearchTerm = (searchTerm: string): string =>\n  searchTerm.replace(/ /g, \"+\");\n\nconst sanitizedBookResponse = (item: Record<string, any>): BookProps => {\n  const {\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate,\n    previewLink,\n    imageLinks,\n  } = item.volumeInfo;\n\n  const { id } = item;\n\n  return {\n    id,\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate: new Date(publishedDate),\n    previewLink,\n    imageLink: imageLinks?.thumbnail,\n  };\n};\n\nexport const getBooks = async (title = \"\", author = \"\") => {\n  const searchParams = `${googleURL}volumes?q=${\n    title && `+intitle:${sanitizedSearchTerm(title)}`\n  }${\n    author && `+inauthor:${sanitizedSearchTerm(author)}`\n  }+subject:fiction&langRestrict=en&maxResults=40&key=${apiKey}`;\n\n  try {\n    const { data } = await googleInstance.get(searchParams);\n    const bookList = data.items.map(sanitizedBookResponse);\n    return bookList;\n  } catch (e) {\n    console.log(e);\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB;;AAEA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,eAAe,GAAG,MAAAC,IAAA,IAMzB;EAAA,IANgC;IACpCC,SAAS;IACTC;EAIF,CAAC,GAAAF,IAAA;EACC,OAAO,MAAMJ,aAAa,CAACO,IAAI,CAAE,YAAW,EAAE;IAC5CF,SAAS;IACTC;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;;AAEA,MAAME,SAAS,GAAG,sCAAsC;AACxD,MAAMC,MAAM,GAAG,yCAAyC;AAExD,MAAMC,cAAc,GAAGX,KAAK,CAACE,MAAM,CAAC,CAAC;AAErC,MAAMU,mBAAmB,GAAIC,UAAkB,IAC7CA,UAAU,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AAE/B,MAAMC,qBAAqB,GAAIC,IAAyB,IAAgB;EACtE,MAAM;IACJC,KAAK;IACLC,OAAO;IACPC,WAAW;IACXZ,UAAU;IACVa,aAAa;IACbC,WAAW;IACXC;EACF,CAAC,GAAGN,IAAI,CAACO,UAAU;EAEnB,MAAM;IAAEC;EAAG,CAAC,GAAGR,IAAI;EAEnB,OAAO;IACLQ,EAAE;IACFP,KAAK;IACLC,OAAO;IACPC,WAAW;IACXZ,UAAU;IACVa,aAAa,EAAE,IAAIK,IAAI,CAACL,aAAa,CAAC;IACtCC,WAAW;IACXK,SAAS,EAAEJ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEK;EACzB,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,eAAAA,CAAA,EAAmC;EAAA,IAA5BX,KAAK,GAAAY,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACpD,MAAMI,YAAY,GAAI,GAAExB,SAAU,aAChCQ,KAAK,IAAK,YAAWL,mBAAmB,CAACK,KAAK,CAAE,EACjD,GACCe,MAAM,IAAK,aAAYpB,mBAAmB,CAACoB,MAAM,CAAE,EACpD,sDAAqDtB,MAAO,EAAC;EAE9D,IAAI;IACF,MAAM;MAAEwB;IAAK,CAAC,GAAG,MAAMvB,cAAc,CAACwB,GAAG,CAACF,YAAY,CAAC;IACvD,MAAMG,QAAQ,GAAGF,IAAI,CAACG,KAAK,CAACC,GAAG,CAACvB,qBAAqB,CAAC;IACtD,OAAOqB,QAAQ;EACjB,CAAC,CAAC,OAAOG,CAAC,EAAE;IACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;EAChB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}