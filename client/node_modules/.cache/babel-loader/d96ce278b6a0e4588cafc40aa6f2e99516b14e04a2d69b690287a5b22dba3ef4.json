{"ast":null,"code":"import axios from \"axios\";\n// local requests\n\nconst sanitizedCategories = categories => categories.map(c => c.id ? c : {\n  name: c.name\n});\nexport const createBookEntry = async _ref => {\n  let {\n    googleId,\n    ISBN10,\n    ISBN13,\n    categories\n  } = _ref;\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\"\n  });\n  const response = await localInstance.post(`/api/book/`, {\n    googleId,\n    categories: sanitizedCategories(categories)\n  });\n  return response.data;\n};\nexport const createCategoryEntry = async _ref2 => {\n  let {\n    categoryName\n  } = _ref2;\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\"\n  });\n  console.log(categoryName);\n  return await localInstance.post(`/api/category/`, {\n    name: categoryName\n  });\n};\nexport const createBulkCategoryEntries = async _ref3 => {\n  let {\n    categories\n  } = _ref3;\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\"\n  });\n  const response = await localInstance.post(`/api/category/bulk/`, {\n    categories: categories.map(c => ({\n      name: c\n    }))\n  });\n  return response.data;\n};\nexport const getAllCategories = async () => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\"\n  });\n  const response = await localInstance.get(`/api/category`);\n  return response.data;\n};\nexport const addCategoriesToBook = async (bookId, categories) => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\"\n  });\n  return await localInstance.post(`/api/book/addCategories`, {\n    categories,\n    bookId\n  });\n};\nexport const getLocalBooks = async () => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\"\n  });\n  const response = await localInstance.get(`/api/books/`);\n  return response;\n};\nexport const getLocalBook = async bookId => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\"\n  });\n  const response = await localInstance.get(`/api/book/googleId/${bookId}`);\n  return response;\n};\n\n// google api requests\n\nconst googleURL = \"https://www.googleapis.com/books/v1/\";\nconst apiKey = \"AIzaSyBbgOtmMrBOZ6ie66zJXV2h_IG8UcUX_VI\";\nconst sanitizedSearchTerm = searchTerm => searchTerm.replace(/ /g, \"+\");\nconst sanitizedBookResponse = item => {\n  const {\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate,\n    previewLink,\n    imageLinks\n  } = item.volumeInfo;\n  const {\n    id\n  } = item;\n  return {\n    id,\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate: new Date(publishedDate),\n    previewLink,\n    imageLink: imageLinks === null || imageLinks === void 0 ? void 0 : imageLinks.thumbnail\n  };\n};\nexport const getBooks = async function () {\n  let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let author = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  const searchParams = `${googleURL}volumes?q=${title && `+intitle:${sanitizedSearchTerm(title)}`}${author && `+inauthor:${sanitizedSearchTerm(author)}`}+subject:fiction&langRestrict=en&maxResults=40&key=${apiKey}`;\n  try {\n    const {\n      data\n    } = await axios.get(searchParams);\n    const bookList = data.items.map(sanitizedBookResponse);\n    return bookList;\n  } catch (e) {\n    console.log(e);\n  }\n};","map":{"version":3,"names":["axios","sanitizedCategories","categories","map","c","id","name","createBookEntry","_ref","googleId","ISBN10","ISBN13","localInstance","create","baseURL","response","post","data","createCategoryEntry","_ref2","categoryName","console","log","createBulkCategoryEntries","_ref3","getAllCategories","get","addCategoriesToBook","bookId","getLocalBooks","getLocalBook","googleURL","apiKey","sanitizedSearchTerm","searchTerm","replace","sanitizedBookResponse","item","title","authors","description","publishedDate","previewLink","imageLinks","volumeInfo","Date","imageLink","thumbnail","getBooks","arguments","length","undefined","author","searchParams","bookList","items","e"],"sources":["/Users/careycosta/dev/darkreads/client/src/components/repository.ts"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { BookProps, CategoryProps } from \"./types\";\n\n// local requests\n\nconst sanitizedCategories = (categories: CategoryProps[]) =>\n  categories.map((c: CategoryProps) => (c.id ? c : { name: c.name }));\n\nexport const createBookEntry = async ({\n  googleId,\n  ISBN10,\n  ISBN13,\n  categories,\n}: {\n  googleId: string;\n  categories: CategoryProps[];\n}) => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  const response = await localInstance.post(`/api/book/`, {\n    googleId,\n    categories: sanitizedCategories(categories),\n  });\n\n  return response.data;\n};\n\nexport const createCategoryEntry = async ({\n  categoryName,\n}: {\n  categoryName: string;\n}) => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  console.log(categoryName);\n  return await localInstance.post(`/api/category/`, {\n    name: categoryName,\n  });\n};\n\nexport const createBulkCategoryEntries = async ({\n  categories,\n}: {\n  categories: string[];\n}) => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  const response = await localInstance.post(`/api/category/bulk/`, {\n    categories: categories.map((c) => ({ name: c })),\n  });\n\n  return response.data;\n};\n\nexport const getAllCategories = async () => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  const response = await localInstance.get(`/api/category`);\n  return response.data;\n};\n\nexport const addCategoriesToBook = async (\n  bookId: string,\n  categories: AxiosResponse<any, any>\n) => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  return await localInstance.post(`/api/book/addCategories`, {\n    categories,\n    bookId,\n  });\n};\n\nexport const getLocalBooks = async () => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  const response = await localInstance.get(`/api/books/`);\n\n  return response;\n};\n\nexport const getLocalBook = async (bookId: string) => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  const response = await localInstance.get(`/api/book/googleId/${bookId}`);\n\n  return response;\n};\n\n// google api requests\n\nconst googleURL = \"https://www.googleapis.com/books/v1/\";\nconst apiKey = \"AIzaSyBbgOtmMrBOZ6ie66zJXV2h_IG8UcUX_VI\";\n\nconst sanitizedSearchTerm = (searchTerm: string): string =>\n  searchTerm.replace(/ /g, \"+\");\n\nconst sanitizedBookResponse = (item: Record<string, any>): BookProps => {\n  const {\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate,\n    previewLink,\n    imageLinks,\n  } = item.volumeInfo;\n\n  const { id } = item;\n\n  return {\n    id,\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate: new Date(publishedDate),\n    previewLink,\n    imageLink: imageLinks?.thumbnail,\n  };\n};\n\nexport const getBooks = async (title = \"\", author = \"\") => {\n  const searchParams = `${googleURL}volumes?q=${\n    title && `+intitle:${sanitizedSearchTerm(title)}`\n  }${\n    author && `+inauthor:${sanitizedSearchTerm(author)}`\n  }+subject:fiction&langRestrict=en&maxResults=40&key=${apiKey}`;\n\n  try {\n    const { data } = await axios.get(searchParams);\n    const bookList = data.items.map(sanitizedBookResponse);\n    return bookList;\n  } catch (e) {\n    console.log(e);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}