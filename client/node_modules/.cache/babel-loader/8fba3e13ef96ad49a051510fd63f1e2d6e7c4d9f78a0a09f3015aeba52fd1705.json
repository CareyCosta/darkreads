{"ast":null,"code":"import axios from \"axios\";\n// local requests\n\nconst localInstance = axios.create({\n  baseURL: \"http://localhost:5000/api/books\"\n});\nexport const createBookEntry = async () => {\n  return await localInstance.post(`/`, {\n    title: \"New Book Title\",\n    description: \"fantastic book!\"\n  });\n};\n\n// google api requests\n\nconst googleURL = \"https://www.googleapis.com/books/v1/\";\nconst apiKey = \"AIzaSyBbgOtmMrBOZ6ie66zJXV2h_IG8UcUX_VI\";\nconst sanitizedSearchTerm = searchTerm => searchTerm.replace(/ /g, \"+\");\nconst sanitizedBookResponse = item => {\n  const {\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate,\n    previewLink,\n    imageLinks\n  } = item.volumeInfo;\n  const {\n    id\n  } = item;\n  return {\n    id,\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate: new Date(publishedDate),\n    previewLink,\n    imageLink: imageLinks === null || imageLinks === void 0 ? void 0 : imageLinks.thumbnail\n  };\n};\nexport const getBooks = async function () {\n  let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let author = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  const searchParams = `${googleURL}volumes?q=${title && `+intitle:${sanitizedSearchTerm(title)}`}${author && `+inauthor:\"${sanitizedSearchTerm(author)}\"`}+subject:fiction&langRestrict=en&maxResults=40&key=${apiKey}`;\n\n  // const authorParams = `${googleURL}volumes?q=${\n  //   author && `+inauthor:${sanitizedSearchTerm(author)}`\n  // }${\n  //   title && `+intitle:${sanitizedSearchTerm(title)}`\n  // }&langRestrict=en&maxResults=40&key=${apiKey}`;\n\n  try {\n    const {\n      data\n    } = await axios.get(searchParams);\n    const bookList = data.items.map(sanitizedBookResponse);\n    return bookList;\n  } catch (e) {\n    console.log(e);\n  }\n};","map":{"version":3,"names":["axios","localInstance","create","baseURL","createBookEntry","post","title","description","googleURL","apiKey","sanitizedSearchTerm","searchTerm","replace","sanitizedBookResponse","item","authors","categories","publishedDate","previewLink","imageLinks","volumeInfo","id","Date","imageLink","thumbnail","getBooks","arguments","length","undefined","author","searchParams","data","get","bookList","items","map","e","console","log"],"sources":["/Users/careycosta/dev/darkreads/client/src/components/repository.ts"],"sourcesContent":["import axios from \"axios\";\nimport { BookProps } from \"./types\";\n\n// local requests\n\nconst localInstance = axios.create({\n  baseURL: \"http://localhost:5000/api/books\",\n});\n\nexport const createBookEntry = async () => {\n  return await localInstance.post(`/`, {\n    title: \"New Book Title\",\n    description: \"fantastic book!\",\n  });\n};\n\n// google api requests\n\nconst googleURL = \"https://www.googleapis.com/books/v1/\";\nconst apiKey = \"AIzaSyBbgOtmMrBOZ6ie66zJXV2h_IG8UcUX_VI\";\n\nconst sanitizedSearchTerm = (searchTerm: string): string =>\n  searchTerm.replace(/ /g, \"+\");\n\nconst sanitizedBookResponse = (item: Record<string, any>): BookProps => {\n  const {\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate,\n    previewLink,\n    imageLinks,\n  } = item.volumeInfo;\n\n  const { id } = item;\n\n  return {\n    id,\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate: new Date(publishedDate),\n    previewLink,\n    imageLink: imageLinks?.thumbnail,\n  };\n};\n\nexport const getBooks = async (title = \"\", author = \"\") => {\n  const searchParams = `${googleURL}volumes?q=${\n    title && `+intitle:${sanitizedSearchTerm(title)}`\n  }${\n    author && `+inauthor:\"${sanitizedSearchTerm(author)}\"`\n  }+subject:fiction&langRestrict=en&maxResults=40&key=${apiKey}`;\n\n  // const authorParams = `${googleURL}volumes?q=${\n  //   author && `+inauthor:${sanitizedSearchTerm(author)}`\n  // }${\n  //   title && `+intitle:${sanitizedSearchTerm(title)}`\n  // }&langRestrict=en&maxResults=40&key=${apiKey}`;\n\n  try {\n    const { data } = await axios.get(searchParams);\n    const bookList = data.items.map(sanitizedBookResponse);\n    return bookList;\n  } catch (e) {\n    console.log(e);\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB;;AAEA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,OAAO,MAAMH,aAAa,CAACI,IAAI,CAAE,GAAE,EAAE;IACnCC,KAAK,EAAE,gBAAgB;IACvBC,WAAW,EAAE;EACf,CAAC,CAAC;AACJ,CAAC;;AAED;;AAEA,MAAMC,SAAS,GAAG,sCAAsC;AACxD,MAAMC,MAAM,GAAG,yCAAyC;AAExD,MAAMC,mBAAmB,GAAIC,UAAkB,IAC7CA,UAAU,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AAE/B,MAAMC,qBAAqB,GAAIC,IAAyB,IAAgB;EACtE,MAAM;IACJR,KAAK;IACLS,OAAO;IACPR,WAAW;IACXS,UAAU;IACVC,aAAa;IACbC,WAAW;IACXC;EACF,CAAC,GAAGL,IAAI,CAACM,UAAU;EAEnB,MAAM;IAAEC;EAAG,CAAC,GAAGP,IAAI;EAEnB,OAAO;IACLO,EAAE;IACFf,KAAK;IACLS,OAAO;IACPR,WAAW;IACXS,UAAU;IACVC,aAAa,EAAE,IAAIK,IAAI,CAACL,aAAa,CAAC;IACtCC,WAAW;IACXK,SAAS,EAAEJ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEK;EACzB,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,eAAAA,CAAA,EAAmC;EAAA,IAA5BnB,KAAK,GAAAoB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACpD,MAAMI,YAAY,GAAI,GAAEtB,SAAU,aAChCF,KAAK,IAAK,YAAWI,mBAAmB,CAACJ,KAAK,CAAE,EACjD,GACCuB,MAAM,IAAK,cAAanB,mBAAmB,CAACmB,MAAM,CAAE,GACrD,sDAAqDpB,MAAO,EAAC;;EAE9D;EACA;EACA;EACA;EACA;;EAEA,IAAI;IACF,MAAM;MAAEsB;IAAK,CAAC,GAAG,MAAM/B,KAAK,CAACgC,GAAG,CAACF,YAAY,CAAC;IAC9C,MAAMG,QAAQ,GAAGF,IAAI,CAACG,KAAK,CAACC,GAAG,CAACtB,qBAAqB,CAAC;IACtD,OAAOoB,QAAQ;EACjB,CAAC,CAAC,OAAOG,CAAC,EAAE;IACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;EAChB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}