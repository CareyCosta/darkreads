{"ast":null,"code":"var _jsxFileName = \"/Users/careycosta/dev/darkreads/client/src/components/BookModal/BookActionsForm.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useFormik } from \"formik\";\nimport { MultiSelect } from \"../../BuildingBlocks/MultiSelect/MultiSelect\";\nimport { getAllCategories, createBookEntry } from \"../../components/repository\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BookActionsForm = _ref => {\n  _s();\n  let {\n    bookId,\n    googleBookId,\n    categories\n  } = _ref;\n  const [allCategories, setAllCategoryOptions] = useState([]);\n  useEffect(() => {\n    const getCategories = async () => {\n      const categoriesResponse = await getAllCategories();\n      setAllCategoryOptions(categoriesResponse);\n    };\n    getCategories();\n  }, []);\n  const handleAddToDB = async categories => {\n    const sanitizedCategories = categories.map(c => c.id ? c : {\n      name: c.name\n    });\n    if (!bookId) {\n      await createBookEntry({\n        googleId: googleBookId,\n        categories\n      });\n    }\n  };\n  const initialValues = {\n    categories: categories || []\n  };\n  const formik = useFormik({\n    initialValues,\n    onSubmit: values => handleAddToDB(values.categories)\n  });\n  const handleCategorySelect = newValues => {\n    formik.setFieldValue(\"categories\", newValues);\n  };\n\n  //   const createBulkCategories = async ({ name }: { name: string }) => {\n  //     const response = await createBulkCategoryEntries({\n  //       categories: name,\n  //     });\n  //     setAllCategoryOptions((prev) => [...prev, response.data]);\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(MultiSelect, {\n      options: allCategories,\n      setOptions: setAllCategoryOptions,\n      values: formik.values.categories,\n      name: \"bookCategories\",\n      onChange: handleCategorySelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(BookActionsForm, \"b4cW5Ol8bcQbbxgwji3axy+gbyE=\", false, function () {\n  return [useFormik];\n});\n_c = BookActionsForm;\nvar _c;\n$RefreshReg$(_c, \"BookActionsForm\");","map":{"version":3,"names":["useState","useEffect","useFormik","MultiSelect","getAllCategories","createBookEntry","jsxDEV","_jsxDEV","BookActionsForm","_ref","_s","bookId","googleBookId","categories","allCategories","setAllCategoryOptions","getCategories","categoriesResponse","handleAddToDB","sanitizedCategories","map","c","id","name","googleId","initialValues","formik","onSubmit","values","handleCategorySelect","newValues","setFieldValue","handleSubmit","children","options","setOptions","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/careycosta/dev/darkreads/client/src/components/BookModal/BookActionsForm.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useFormik, FormikProps } from \"formik\";\n\nimport { MultiSelect } from \"../../BuildingBlocks/MultiSelect/MultiSelect\";\nimport { LocalBookProps, CategoryProps } from \"../types\";\nimport { getAllCategories, createBookEntry } from \"../../components/repository\";\n\ntype NewCategoryProps = Pick<CategoryProps, \"name\">;\n\ninterface BookActionsFormProps {\n  bookId: string | undefined;\n  googleBookId: string;\n  categories: CategoryProps[] | undefined;\n}\n\nexport const BookActionsForm = ({\n  bookId,\n  googleBookId,\n  categories,\n}: BookActionsFormProps) => {\n  const [allCategories, setAllCategoryOptions] = useState<CategoryProps[]>([]);\n\n  useEffect(() => {\n    const getCategories = async () => {\n      const categoriesResponse = await getAllCategories();\n      setAllCategoryOptions(categoriesResponse);\n    };\n\n    getCategories();\n  }, []);\n\n  const handleAddToDB = async (categories: CategoryProps[]) => {\n    const sanitizedCategories = categories.map((c) =>\n      c.id ? c : { name: c.name }\n    );\n    if (!bookId) {\n      await createBookEntry({\n        googleId: googleBookId,\n        categories,\n      });\n    }\n  };\n\n  const initialValues = {\n    categories: categories || [],\n  };\n\n  const formik = useFormik({\n    initialValues,\n    onSubmit: (values) => handleAddToDB(values.categories),\n  });\n\n  const handleCategorySelect = (newValues: NewCategoryProps[]) => {\n    formik.setFieldValue(\"categories\", newValues);\n  };\n\n  //   const createBulkCategories = async ({ name }: { name: string }) => {\n  //     const response = await createBulkCategoryEntries({\n  //       categories: name,\n  //     });\n  //     setAllCategoryOptions((prev) => [...prev, response.data]);\n  //   };\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <MultiSelect\n        options={allCategories}\n        setOptions={setAllCategoryOptions}\n        values={formik.values.categories}\n        name=\"bookCategories\"\n        onChange={handleCategorySelect}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAqB,QAAQ;AAE/C,SAASC,WAAW,QAAQ,8CAA8C;AAE1E,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUhF,OAAO,MAAMC,eAAe,GAAGC,IAAA,IAIH;EAAAC,EAAA;EAAA,IAJI;IAC9BC,MAAM;IACNC,YAAY;IACZC;EACoB,CAAC,GAAAJ,IAAA;EACrB,MAAM,CAACK,aAAa,EAAEC,qBAAqB,CAAC,GAAGf,QAAQ,CAAkB,EAAE,CAAC;EAE5EC,SAAS,CAAC,MAAM;IACd,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,kBAAkB,GAAG,MAAMb,gBAAgB,CAAC,CAAC;MACnDW,qBAAqB,CAACE,kBAAkB,CAAC;IAC3C,CAAC;IAEDD,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,aAAa,GAAG,MAAOL,UAA2B,IAAK;IAC3D,MAAMM,mBAAmB,GAAGN,UAAU,CAACO,GAAG,CAAEC,CAAC,IAC3CA,CAAC,CAACC,EAAE,GAAGD,CAAC,GAAG;MAAEE,IAAI,EAAEF,CAAC,CAACE;IAAK,CAC5B,CAAC;IACD,IAAI,CAACZ,MAAM,EAAE;MACX,MAAMN,eAAe,CAAC;QACpBmB,QAAQ,EAAEZ,YAAY;QACtBC;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMY,aAAa,GAAG;IACpBZ,UAAU,EAAEA,UAAU,IAAI;EAC5B,CAAC;EAED,MAAMa,MAAM,GAAGxB,SAAS,CAAC;IACvBuB,aAAa;IACbE,QAAQ,EAAGC,MAAM,IAAKV,aAAa,CAACU,MAAM,CAACf,UAAU;EACvD,CAAC,CAAC;EAEF,MAAMgB,oBAAoB,GAAIC,SAA6B,IAAK;IAC9DJ,MAAM,CAACK,aAAa,CAAC,YAAY,EAAED,SAAS,CAAC;EAC/C,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEvB,OAAA;IAAMoB,QAAQ,EAAED,MAAM,CAACM,YAAa;IAAAC,QAAA,gBAClC1B,OAAA,CAACJ,WAAW;MACV+B,OAAO,EAAEpB,aAAc;MACvBqB,UAAU,EAAEpB,qBAAsB;MAClCa,MAAM,EAAEF,MAAM,CAACE,MAAM,CAACf,UAAW;MACjCU,IAAI,EAAC,gBAAgB;MACrBa,QAAQ,EAAEP;IAAqB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACFjC,OAAA;MAAQkC,IAAI,EAAC,QAAQ;MAAAR,QAAA,EAAC;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEX,CAAC;AAAC9B,EAAA,CA5DWF,eAAe;EAAA,QAgCXN,SAAS;AAAA;AAAAwC,EAAA,GAhCblC,eAAe;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}