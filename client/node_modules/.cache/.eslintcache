[{"/Users/careycosta/dev/darkreads/client/src/index.tsx":"1","/Users/careycosta/dev/darkreads/client/src/reportWebVitals.ts":"2","/Users/careycosta/dev/darkreads/client/src/App.tsx":"3","/Users/careycosta/dev/darkreads/client/src/components/SearchHeader/SearchHeader.tsx":"4","/Users/careycosta/dev/darkreads/client/src/components/Books/Books.tsx":"5","/Users/careycosta/dev/darkreads/client/src/components/repository.ts":"6","/Users/careycosta/dev/darkreads/client/src/components/BookModal/BookModal.tsx":"7","/Users/careycosta/dev/darkreads/client/src/BuildingBlocks/Modal/Modal.tsx":"8"},{"size":554,"mtime":1688307078564,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1688307078564,"results":"11","hashOfConfig":"10"},{"size":539,"mtime":1688501921331,"results":"12","hashOfConfig":"10"},{"size":3086,"mtime":1688498604287,"results":"13","hashOfConfig":"10"},{"size":1552,"mtime":1688495769502,"results":"14","hashOfConfig":"10"},{"size":2299,"mtime":1688557445094,"results":"15","hashOfConfig":"10"},{"size":2030,"mtime":1688521061159,"results":"16","hashOfConfig":"10"},{"size":439,"mtime":1688493353086,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1kt9fgf",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/Users/careycosta/dev/darkreads/client/src/index.tsx",[],[],[],"/Users/careycosta/dev/darkreads/client/src/reportWebVitals.ts",[],[],"/Users/careycosta/dev/darkreads/client/src/App.tsx",["49"],[],"import { useState, useEffect } from \"react\";\nimport { Books } from \"./components/Books/Books\";\nimport { SearchHeader } from \"./components/SearchHeader/SearchHeader\";\nimport { BookProps } from \"./components/types\";\n\nimport styles from \"./App.module.scss\";\n\nconst { container } = styles;\n\nfunction App() {\n  const [books, setBooks] = useState<BookProps[]>([]);\n\n  return (\n    <div className={container}>\n      <SearchHeader handleSetBooks={setBooks} books={books} />\n      <Books booksList={books} />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/careycosta/dev/darkreads/client/src/components/SearchHeader/SearchHeader.tsx",["50","51"],[],"import { useEffect, useState } from \"react\";\nimport { sortBy } from \"lodash\";\nimport {\n  BookProps,\n  SearchStateProps,\n  SortConfigProps,\n  SearchHeaderProps,\n} from \"../types\";\nimport { getBooks } from \"../repository\";\n\nimport styles from \"./SearchHeader.module.scss\";\nconst { headerContainer, inputWrapper, searchButton } = styles;\n\nconst localStorageState = localStorage.getItem(\"searchState\");\nconst initialState = localStorageState ? JSON.parse(localStorageState) : null;\n\nconst sortBooks = (booksList: BookProps[], direction: string): BookProps[] => {\n  if (direction === \"ASC\") {\n    return sortBy(booksList, (item: BookProps) => item.publishedDate);\n  } else {\n    return sortBy(booksList, (item: BookProps) => item.publishedDate).reverse();\n  }\n};\n\nexport const SearchHeader = (props: SearchHeaderProps) => {\n  const { handleSetBooks, books } = props;\n\n  const [searchState, setSearchState] =\n    useState<SearchStateProps>(initialState);\n  const [sortConfig, setSortConfig] = useState<SortConfigProps>({\n    direction: \"ASC\",\n  });\n\n  // get books initially\n  useEffect(() => {\n    if (!searchState) {\n      return;\n    }\n    getBooks(searchState.title, searchState.author).then((response) =>\n      handleSetBooks(response)\n    );\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"searchState\", JSON.stringify(searchState));\n  }, [searchState]);\n\n  // when the sortDirection changes, update the book state\n  useEffect(() => {\n    handleSetBooks(sortBooks(books, sortConfig.direction));\n  }, [sortConfig.direction]);\n\n  const toggleSortDirection = () => {\n    if (sortConfig.direction === \"ASC\") {\n      setSortConfig((state) => ({ ...state, direction: \"DESC\" }));\n    } else {\n      setSortConfig((state) => ({ ...state, direction: \"ASC\" }));\n    }\n  };\n\n  // fetch books with current state parameters\n  const handleGetBooks = async () => {\n    const response = await getBooks(searchState.title, searchState.author);\n    handleSetBooks(sortBooks(response, sortConfig.direction));\n  };\n\n  return (\n    <>\n      <div className={headerContainer}>\n        <h1>darkreads ðŸ•·</h1>\n        <div>\n          <div className={inputWrapper}>\n            <input\n              type=\"text\"\n              placeholder=\"book title\"\n              onChange={(e) =>\n                setSearchState((state) => ({ ...state, title: e.target.value }))\n              }\n              value={searchState?.title}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"author\"\n              onChange={(e) =>\n                setSearchState((state) => ({\n                  ...state,\n                  author: e.target.value,\n                }))\n              }\n              value={searchState?.author}\n            />\n            <button className={searchButton} onClick={handleGetBooks}>\n              <span>ðŸ’€</span>\n            </button>\n            {!!books.length && (\n              <button onClick={toggleSortDirection}>\n                {sortConfig.direction}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","/Users/careycosta/dev/darkreads/client/src/components/Books/Books.tsx",["52"],[],"import { useState } from \"react\";\nimport { BookProps } from \"../types\";\nimport { BookModal } from \"../BookModal/BookModal\";\nimport styles from \"./Books.module.scss\";\n\nconst {\n  booksContainer,\n  bookItem,\n  bookInfoWrapper,\n  bookTitle,\n  bookDescription,\n  imageContainer,\n} = styles;\n\nconst getSanitizedDate = (date: Date) => {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n\n  return [day, month, year].join(\"/\");\n};\n\nexport const Books = (props: { booksList: BookProps[] }) => {\n  const [showBookModal, setShowBookModal] = useState<string | null>(null);\n  const { booksList } = props;\n  return (\n    <div className={booksContainer}>\n      {showBookModal && (\n        <BookModal\n          handleShowModal={setShowBookModal}\n          book={booksList.find((b) => b.id === showBookModal)}\n        />\n      )}\n      {booksList.length ? (\n        booksList.map((b) => (\n          <div className={bookItem} key={`book-${b.id}`}>\n            <div className={bookInfoWrapper}>\n              <div className={bookTitle}>{b.title}</div>\n              <div>{b.authors}</div>\n              <div>{getSanitizedDate(b.publishedDate)}</div>\n              <div className={bookDescription}>{b.description}</div>\n              <button onClick={() => setShowBookModal(b.id)}>show modal</button>\n            </div>\n            <div className={imageContainer}>\n              <img src={b.imageLink} />\n            </div>\n          </div>\n        ))\n      ) : (\n        <div>no books</div>\n      )}\n    </div>\n  );\n};\n","/Users/careycosta/dev/darkreads/client/src/components/repository.ts",["53"],[],"import axios from \"axios\";\nimport { BookProps } from \"./types\";\n\n// local requests\n\nexport const createBookEntry = async ({ googleId }: { googleId: string }) => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  return await localInstance.post(`/api/book/`, {\n    googleId,\n  });\n};\n\nexport const createBulkCategoryEntries = async ({\n  categories,\n}: {\n  categories: string[];\n}) => {\n  console.log(\"categories????\", categories);\n\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  return await localInstance.post(`/api/category/bulk/`, {\n    categories: categories.map((c) => ({ name: c })),\n  });\n};\n\nexport const createCategoryEntry = async ({\n  categoryName,\n}: {\n  categoryName: string;\n}) => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  return await localInstance.post(`/api/category/`, {\n    category: categoryName,\n  });\n};\n\nexport const getLocalBooks = async () => {\n  const localInstance = axios.create({\n    baseURL: \"http://localhost:5000\",\n  });\n\n  const response = await localInstance.get(`/api/books/`);\n\n  // return response;\n};\n\n// google api requests\n\nconst googleURL = \"https://www.googleapis.com/books/v1/\";\nconst apiKey = \"AIzaSyBbgOtmMrBOZ6ie66zJXV2h_IG8UcUX_VI\";\n\nconst sanitizedSearchTerm = (searchTerm: string): string =>\n  searchTerm.replace(/ /g, \"+\");\n\nconst sanitizedBookResponse = (item: Record<string, any>): BookProps => {\n  const {\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate,\n    previewLink,\n    imageLinks,\n  } = item.volumeInfo;\n\n  const { id } = item;\n\n  return {\n    id,\n    title,\n    authors,\n    description,\n    categories,\n    publishedDate: new Date(publishedDate),\n    previewLink,\n    imageLink: imageLinks?.thumbnail,\n  };\n};\n\nexport const getBooks = async (title = \"\", author = \"\") => {\n  const searchParams = `${googleURL}volumes?q=${\n    title && `+intitle:${sanitizedSearchTerm(title)}`\n  }${\n    author && `+inauthor:${sanitizedSearchTerm(author)}`\n  }+subject:fiction&langRestrict=en&maxResults=40&key=${apiKey}`;\n\n  try {\n    const { data } = await axios.get(searchParams);\n    const bookList = data.items.map(sanitizedBookResponse);\n    return bookList;\n  } catch (e) {\n    console.log(e);\n  }\n};\n","/Users/careycosta/dev/darkreads/client/src/components/BookModal/BookModal.tsx",["54","55","56"],[],"import { Modal } from \"../../BuildingBlocks/Modal/Modal\";\nimport { BookModalProps } from \"./types\";\n\nimport { createBookEntry, createCategoryEntry, createBulkCategoryEntries } from \"../repository\";\n\nimport styles from \"./BookModal.module.scss\";\n\nconst {\n  bookModalWrapper,\n  bookInfoWrapper,\n  bookTitle,\n  bookDescription,\n  imageContainer,\n} = styles;\n\nconst handleAddToDB = async (params: {\n  googleId: string | undefined;\n  categories: string[];\n}) => {\n  if (!params.googleId || !params.categories.length) {\n    return;\n  }\n  const newBook = await createBookEntry({ googleId: params.googleId });\n  // const newcategory = await createCategoryEntry({\n  //   categoryName: params.categories[0],\n  // });\n\n  const newCategory = await createBulkCategoryEntries({\n    categories: params.categories,\n  });\n\n  return { newBook, newCategory };\n};\n\nexport const BookModal = ({ handleShowModal, book }: BookModalProps) => {\n  return (\n    <Modal handleClose={() => handleShowModal(null)}>\n      <div className={bookModalWrapper}>\n        <div className={bookInfoWrapper}>\n          <div className={bookTitle}>{book?.title}</div>\n          <div>{book?.authors}</div>\n          <div className={bookDescription}>{book?.description}</div>\n          <form>\n            <label htmlFor=\"categories\">Categories</label>\n            <input type=\"text\" list=\"categories\" />\n            <datalist id=\"categories\">\n              <option>Google</option>\n              <option>IE9</option>\n            </datalist>\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                handleAddToDB({ googleId: book?.id, categories: [\"Erotica\", \"New Adult\", \"Suspense\"] });\n              }}\n            >\n              Add to DB\n            </button>\n          </form>\n        </div>\n        <div className={imageContainer}>\n          <img src={book?.imageLink} />\n          <a href={book?.previewLink} target=\"_blank\">\n            View in Google Books\n          </a>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n",[],"/Users/careycosta/dev/darkreads/client/src/BuildingBlocks/Modal/Modal.tsx",[],[],{"ruleId":"57","severity":1,"message":"58","line":1,"column":20,"nodeType":"59","messageId":"60","endLine":1,"endColumn":29},{"ruleId":"61","severity":1,"message":"62","line":42,"column":6,"nodeType":"63","endLine":42,"endColumn":8,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":51,"column":6,"nodeType":"63","endLine":51,"endColumn":28,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":45,"column":15,"nodeType":"69","endLine":45,"endColumn":40},{"ruleId":"57","severity":1,"message":"70","line":51,"column":9,"nodeType":"59","messageId":"60","endLine":51,"endColumn":17},{"ruleId":"57","severity":1,"message":"71","line":4,"column":27,"nodeType":"59","messageId":"60","endLine":4,"endColumn":46},{"ruleId":"67","severity":1,"message":"68","line":61,"column":11,"nodeType":"69","endLine":61,"endColumn":40},{"ruleId":"72","severity":1,"message":"73","line":62,"column":11,"nodeType":"69","messageId":"74","endLine":62,"endColumn":55,"fix":"75"},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleSetBooks' and 'searchState'. Either include them or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has missing dependencies: 'books' and 'handleSetBooks'. Either include them or remove the dependency array.",["77"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'response' is assigned a value but never used.","'createCategoryEntry' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"78","text":"79"},{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},[1931,1931]," rel=\"noreferrer\"","Update the dependencies array to be: [handleSetBooks, searchState]",{"range":"84","text":"85"},"Update the dependencies array to be: [books, handleSetBooks, sortConfig.direction]",{"range":"86","text":"87"},[1247,1249],"[handleSetBooks, searchState]",[1509,1531],"[books, handleSetBooks, sortConfig.direction]"]